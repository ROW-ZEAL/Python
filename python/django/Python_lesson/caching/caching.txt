work smart not sharp is the main agenda of caching.
Using cache with apiview and viewsets
Django provides a method_decorator to use decorators with class based views. This can be used with other cache decorators such as cache_page, vary_on_cookie and vary_on_headers.


to cache in classbased viewsets first we have to save this things in our settings
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379/1",
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient"
#         },
#         "KEY_PREFIX": "example"
#     }
# }

after that import 
from django.views.decorators.cache import cache_page this on views.py

implement caching like this in your classbased view 
class floorsheet_1(APIView):
    # @method_decorator(cache_page(60*5))

    def get(self, request):
        return Response(api_floorsheet_get_floorsheet(request=request))



Status Code: 200 OK (from disk cache) --- we need to get this output in network inspect 